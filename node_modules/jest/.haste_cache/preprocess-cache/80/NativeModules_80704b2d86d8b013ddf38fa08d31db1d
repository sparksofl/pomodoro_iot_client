'use strict';













var RemoteModules=require('BatchedBridge').RemoteModules;

function normalizePrefix(moduleName){
return moduleName.replace(/^(RCT|RK)/,'');}





Object.keys(RemoteModules).forEach(function(moduleName){
var strippedName=normalizePrefix(moduleName);
if(RemoteModules['RCT'+strippedName]&&RemoteModules['RK'+strippedName]){
throw new Error(
'Module cannot be registered as both RCT and RK: '+moduleName);}


if(strippedName!==moduleName){
RemoteModules[strippedName]=RemoteModules[moduleName];
delete RemoteModules[moduleName];}});







var NativeModules={};
Object.keys(RemoteModules).forEach(function(moduleName){
Object.defineProperty(NativeModules,moduleName,{
configurable:true,
enumerable:true,
get:function get(){
var module=RemoteModules[moduleName];
if(module&&typeof module.moduleID==='number'&&global.nativeRequireModuleConfig){
var json=global.nativeRequireModuleConfig(moduleName);
var config=json&&JSON.parse(json);
module=config&&require('BatchedBridge').processModuleConfig(config,module.moduleID);
RemoteModules[moduleName]=module;}

Object.defineProperty(NativeModules,moduleName,{
configurable:true,
enumerable:true,
value:module});

return module;}});});




module.exports=NativeModules;