'use strict';










jest.disableAutomock();var 

encode=require('../utf8').encode;

describe('UTF-8 encoding:',function(){
it('can encode code points < U+80',function(){
var arrayBuffer=encode('\u0000abcDEF\u007f');
expect(new Uint8Array(arrayBuffer)).toEqual(
new Uint8Array([0x00,0x61,0x62,0x63,0x44,0x45,0x46,0x7f]));});


it('can encode code points < U+800',function(){
var arrayBuffer=encode('\u0080\u0548\u07ff');
expect(new Uint8Array(arrayBuffer)).toEqual(
new Uint8Array([0xc2,0x80,0xd5,0x88,0xdf,0xbf]));});


it('can encode code points < U+10000',function(){
var arrayBuffer=encode('\u0800\uac48\uffff');
expect(new Uint8Array(arrayBuffer)).toEqual(
new Uint8Array([0xe0,0xa0,0x80,0xea,0xb1,0x88,0xef,0xbf,0xbf]));});


it('can encode code points in the Supplementary Planes (surrogate pairs)',function(){
var arrayBuffer=encode([
'\ud800\udc00',
'\ud800\ude89',
'\ud83d\ude3b',
'\udbff\udfff'].
join(''));
expect(new Uint8Array(arrayBuffer)).toEqual(
new Uint8Array([
0xf0,0x90,0x80,0x80,
0xf0,0x90,0x8a,0x89,
0xf0,0x9f,0x98,0xbb,
0xf4,0x8f,0xbf,0xbf]));});




it('allows for stray high surrogates',function(){
var arrayBuffer=encode('a\ud8c6b');
expect(new Uint8Array(arrayBuffer)).toEqual(
new Uint8Array([0x61,0xed,0xa3,0x86,0x62]));});


it('allows for stray low surrogates',function(){
var arrayBuffer=encode('a\ude19b');
expect(new Uint8Array(arrayBuffer)).toEqual(
new Uint8Array([0x61,0xed,0xb8,0x99,0x62]));});});