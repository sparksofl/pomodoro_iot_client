jest.










disableAutomock();

describe('Number (ES6)',function(){
describe('EPSILON',function(){
beforeEach(function(){
delete Number.EPSILON;
jest.resetModuleRegistry();
require('../Number.es6');});

it('is 2^(-52)',function(){
expect(Number.EPSILON).toBe(Math.pow(2,-52));});

it('can be used to test equality',function(){

expect(Number.EPSILON).toBeGreaterThan(Math.abs(0.2-0.3+0.1));});});


describe('MAX_SAFE_INTEGER',function(){
beforeEach(function(){
delete Number.MAX_SAFE_INTEGER;
jest.resetModuleRegistry();
require('../Number.es6');});

it('is 2^53 - 1',function(){
expect(Number.MAX_SAFE_INTEGER).toBe(Math.pow(2,53)-1);});});


describe('MIN_SAFE_INTEGER',function(){
beforeEach(function(){
delete Number.MIN_SAFE_INTEGER;
jest.resetModuleRegistry();
require('../Number.es6');});

it('is -(2^53 - 1)',function(){
expect(Number.MIN_SAFE_INTEGER).toBe(-(Math.pow(2,53)-1));});});


describe('isNaN()',function(){

beforeEach(function(){
delete Number.isNaN;
jest.resetModuleRegistry();
require('../Number.es6');});

it('returns true when fed something that is not-a-number',function(){
[
NaN,
Number.NaN,
0/0].
forEach(function(value){return expect(Number.isNaN(value)).toBe(true);});});

it('returns false when fed something other than not-a-number',function(){
[
'NaN',
undefined,
{},
'blabla',
true,
null,
37,
'37',
'37.37',
'',
' '].
forEach(function(value){return expect(Number.isNaN(value)).toBe(false);});});});});