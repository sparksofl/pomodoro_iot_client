'use strict';var 












ByteVector=function(){



function ByteVector(size){babelHelpers.classCallCheck(this,ByteVector);
this._storage=new Uint8Array(size);
this._sizeWritten=0;}babelHelpers.createClass(ByteVector,[{key:'push',value:function push(


value){
var i=this._sizeWritten;
if(i===this._storage.length){
this._realloc();}

this._storage[i]=value;
this._sizeWritten=i+1;
return this;}},{key:'getBuffer',value:function getBuffer()


{
return this._storage.buffer.slice(0,this._sizeWritten);}},{key:'_realloc',value:function _realloc()


{
var storage=this._storage;
this._storage=new Uint8Array(align(storage.length*1.5));
this._storage.set(storage);}}]);return ByteVector;}();




exports.encode=function(string){var 
length=string.length;
var bytes=new ByteVector(length);









var nextCodePoint=string.charCodeAt(0);
for(var i=0;i<length;i++){
var codePoint=nextCodePoint;
nextCodePoint=string.charCodeAt(i+1);

if(codePoint<0x80){
bytes.push(codePoint);}else 
if(codePoint<0x800){
bytes.
push(0xc0|codePoint>>>6).
push(0x80|codePoint&0x3f);}else 
if(codePoint>>>10===0x36&&nextCodePoint>>>10===0x37){
codePoint=0x10000+((codePoint&0x3ff)<<10|nextCodePoint&0x3ff);
bytes.
push(0xf0|codePoint>>>18&0x7).
push(0x80|codePoint>>>12&0x3f).
push(0x80|codePoint>>>6&0x3f).
push(0x80|codePoint&0x3f);

i+=1;
nextCodePoint=string.charCodeAt(i+1);}else 
{
bytes.
push(0xe0|codePoint>>>12).
push(0x80|codePoint>>>6&0x3f).
push(0x80|codePoint&0x3f);}}


return bytes.getBuffer();};



function align(size){
return size%8?Math.floor(size/8)+1<<3:size;}