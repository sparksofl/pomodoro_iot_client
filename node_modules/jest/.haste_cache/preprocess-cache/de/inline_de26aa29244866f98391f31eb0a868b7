'use strict';










var t=require('babel-core').types;

var React={name:'React'};
var ReactNative={name:'ReactNative'};
var platform={name:'Platform'};
var os={name:'OS'};
var requirePattern={name:'require'};

var env={name:'env'};
var nodeEnv={name:'NODE_ENV'};
var processId={name:'process'};

var dev={name:'__DEV__'};

var importMap=new Map([['ReactNative','react-native']]);

var isGlobal=function isGlobal(binding){return !binding;};

var isToplevelBinding=function isToplevelBinding(binding){return isGlobal(binding)||!binding.scope.parent;};

var isRequireCall=function isRequireCall(node,dependencyId,scope){return (
t.isCallExpression(node)&&
t.isIdentifier(node.callee,requirePattern)&&
t.isStringLiteral(node.arguments[0],t.stringLiteral(dependencyId)));};

var isImport=function isImport(node,scope,patterns){return (
patterns.some(function(pattern){
var importName=importMap.get(pattern.name)||pattern.name;
return isRequireCall(node,importName,scope);}));};


function isImportOrGlobal(node,scope,patterns){
var identifier=patterns.find(function(pattern){return t.isIdentifier(node,pattern);});
return identifier&&isToplevelBinding(scope.getBinding(identifier.name))||
isImport(node,scope,patterns);}


var isPlatformOS=function isPlatformOS(node,scope){return (
t.isIdentifier(node.property,os)&&
isImportOrGlobal(node.object,scope,[platform]));};

var isReactPlatformOS=function isReactPlatformOS(node,scope){return (
t.isIdentifier(node.property,os)&&
t.isMemberExpression(node.object)&&
t.isIdentifier(node.object.property,platform)&&
isImportOrGlobal(node.object.object,scope,[React,ReactNative]));};

var isProcessEnvNodeEnv=function isProcessEnvNodeEnv(node,scope){return (
t.isIdentifier(node.property,nodeEnv)&&
t.isMemberExpression(node.object)&&
t.isIdentifier(node.object.property,env)&&
t.isIdentifier(node.object.object,processId)&&
isGlobal(scope.getBinding(processId.name)));};

var isDev=function isDev(node,parent,scope){return (
t.isIdentifier(node,dev)&&
isGlobal(scope.getBinding(dev.name))&&
!t.isMemberExpression(parent));};

var inlinePlugin={
visitor:{
Identifier:function Identifier(path,state){
if(isDev(path.node,path.parent,path.scope)){
path.replaceWith(t.booleanLiteral(state.opts.dev));}},


MemberExpression:function MemberExpression(path,state){
var node=path.node;
var scope=path.scope;

if(isPlatformOS(node,scope)||isReactPlatformOS(node,scope)){
path.replaceWith(t.stringLiteral(state.opts.platform));}else 
if(isProcessEnvNodeEnv(node,scope)){
path.replaceWith(
t.stringLiteral(state.opts.dev?'development':'production'));}}}};





var plugin=function plugin(){return inlinePlugin;};

function inline(filename,transformResult,options){
var code=transformResult.code;
var babelOptions={
filename:filename,
plugins:[[plugin,options]],
inputSourceMap:transformResult.map,
sourceMaps:true,
sourceFileName:filename,
code:false,
babelrc:false,
compact:true};


return transformResult.ast?
require('babel-core').transformFromAst(transformResult.ast,code,babelOptions):
require('babel-core').transform(code,babelOptions);}


module.exports=inline;