'use strict';var 






















RCTDeviceEventEmitter=function(_EventEmitter){babelHelpers.inherits(RCTDeviceEventEmitter,_EventEmitter);



function RCTDeviceEventEmitter(){babelHelpers.classCallCheck(this,RCTDeviceEventEmitter);
var sharedSubscriber=new (require('EventSubscriptionVendor'))();var _this=babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(RCTDeviceEventEmitter).call(this,
sharedSubscriber));
_this.sharedSubscriber=sharedSubscriber;return _this;}babelHelpers.createClass(RCTDeviceEventEmitter,[{key:'addListener',value:function addListener(


eventType,listener,context){
if(eventType.lastIndexOf('statusBar',0)===0){
console.warn('`%s` event should be registered via the StatusBarIOS module',eventType);
return require('StatusBarIOS').addListener(eventType,listener,context);}

if(eventType.lastIndexOf('keyboard',0)===0){
console.warn('`%s` event should be registered via the Keyboard module',eventType);
return require('Keyboard').addListener(eventType,listener,context);}

return babelHelpers.get(Object.getPrototypeOf(RCTDeviceEventEmitter.prototype),'addListener',this).call(this,eventType,listener,context);}},{key:'removeAllListeners',value:function removeAllListeners(


eventType){
if(eventType){
if(eventType.lastIndexOf('statusBar',0)===0){
console.warn('statusBar events should be unregistered via the StatusBarIOS module');
return require('StatusBarIOS').removeAllListeners(eventType);}

if(eventType.lastIndexOf('keyboard',0)===0){
console.warn('keyboard events should be unregistered via the Keyboard module');
return require('Keyboard').removeAllListeners(eventType);}}


babelHelpers.get(Object.getPrototypeOf(RCTDeviceEventEmitter.prototype),'removeAllListeners',this).call(this,eventType);}},{key:'removeSubscription',value:function removeSubscription(


subscription){
if(subscription.emitter!==this){
subscription.emitter.removeSubscription(subscription);}else 
{
babelHelpers.get(Object.getPrototypeOf(RCTDeviceEventEmitter.prototype),'removeSubscription',this).call(this,subscription);}}}]);return RCTDeviceEventEmitter;}(require('EventEmitter'));




RCTDeviceEventEmitter=new RCTDeviceEventEmitter();

require('BatchedBridge').registerCallableModule(
'RCTDeviceEventEmitter',
RCTDeviceEventEmitter);


module.exports=RCTDeviceEventEmitter;